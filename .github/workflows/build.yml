name: Build and save artifacts

on:
  push:
    branches:
      - main
    tags:
      - 'Release-*'

  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Unshallow repository
        run: git fetch --prune --unshallow

      - name: Determine version (SemVer)
        id: get_version
        shell: pwsh
        run: |
            $ref = $env:GITHUB_REF
            # Find the latest Release-* tag.
            $latestTag = git describe --tags --match "Release-*" --abbrev=0
            if (-not $latestTag) {
                Write-Host "No Release tag found. Using default version 1.0.0."
                "VERSION=1.0.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                "version=1.0.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                exit 0
            }
            # Extract version number from the tag (e.g., Release-1.0.1 -> 1.0.1)
            $versionNumber = $latestTag -replace '^Release-', ''
            Write-Host "latestTag: $latestTag, versionNumber: $versionNumber"
            $distance = git rev-list --count "$latestTag..HEAD"

            # Append -rc<distance> if distance is greater than 0
            if ($distance -gt 0) {
                # Increment the patch number for a prerelease build
                $versionParts = $versionNumber -split '\.'
                $versionParts[2] = [int]$versionParts[2] + 1
                $versionNumber = $versionParts -join '.'
                Write-Output "VERSION CORRECTED, versionNumber: $versionNumber"
                $version = "$versionNumber-rc.$distance"
            } else {
                $version = $versionNumber
            }
            $version = 'v' + $version
            Write-Host "Derived development version: $version (base tag: $latestTag)"
            "VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Using version: $version"

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Restore NuGets
        run: nuget restore SoundWinScanner.sln

      - name: Integrate vcpkg with MSBuild
        run: vcpkg integrate install

      - name: Build with MSBuild
        run: |
          msbuild /p:Configuration=Release /p:VcpkgEnabled=true /p:VcpkgManifestPath=vcpkg.json /p:VcpkgTriplet=x64-windows-static /target:Rebuild -restore
          dotnet publish "Projects/SoundDefaultUI/SoundDefaultUI.csproj" -c Release -p:PublishProfile=FolderProfile -v:minimal

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: artifacts\

  publish:
    if: github.ref != 'refs/pull/develop'
    # if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: build

      - name: Create or update Release
        run: |
          VERS=${{ needs.build.outputs.version }}
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          if gh release view "$VERS" > /dev/null 2>&1; then
            echo "Release $VERS already exists; updating assets"
          else
            gh release create "$VERS" --title "SoundWinScanner $VERS" --notes "Release $VERS"
          fi
          gh release upload "$VERS" build/*.* --clobber
